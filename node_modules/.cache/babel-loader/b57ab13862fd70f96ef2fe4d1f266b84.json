{"ast":null,"code":"var _jsxFileName = \"/home/nicole/Desktop/1.Kenzie/Q2/counter-context/src/Providers/counter/index.js\",\n    _s = $RefreshSig$();\n\n//  importação do contexto que usaremos\nimport { createContext, useState } from \"react\"; // criacao do CounterContext, com export\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CounterContext = /*#__PURE__*/createContext(); //cricacao do CounterProvider com um children por props, ja padrao.\n// o children sera nosso componente englobado  pelo  CounterProvider no futuro\n\nexport const CounterProvider = ({\n  children\n}) => {\n  _s();\n\n  const [counter, setCounter] = useState(0);\n\n  const addNumber = () => {\n    setCounter(counter + 1);\n  };\n\n  const subNumber = () => {\n    setCounter(counter - 1);\n  }; //Vamos entender o nosso retorno. Primeiro passamos o nosso contexto (CounterContext) com um .\n  //Provider para indicar que é o provedor do contexto,\n  // e então recebemos o children, que serão os elementos que terão acesso a esse contexto.\n\n\n  return /*#__PURE__*/_jsxDEV(CounterContext.Provider, {\n    value: {\n      counter,\n      addNumber,\n      subNumber\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CounterProvider, \"mgO7WMHyhiBnLtH7uw/qAj2Cy9A=\");\n\n_c = CounterProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CounterProvider\");","map":{"version":3,"sources":["/home/nicole/Desktop/1.Kenzie/Q2/counter-context/src/Providers/counter/index.js"],"names":["createContext","useState","CounterContext","CounterProvider","children","counter","setCounter","addNumber","subNumber"],"mappings":";;;AAAA;AAEA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC,C,CAEA;;;AAEA,OAAO,MAAMC,cAAc,gBAAGF,aAAa,EAApC,C,CAEP;AACA;;AAEA,OAAO,MAAMG,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC/C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC;;AAEA,QAAMM,SAAS,GAAG,MAAM;AACtBD,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,GAFD;;AAIA,QAAMG,SAAS,GAAG,MAAM;AACtBF,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,GAFD,CAP+C,CAW/C;AACA;AACA;;;AACA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEA,MAAAA,OAAF;AAAWE,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAhC;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnBM;;GAAMD,e;;KAAAA,e","sourcesContent":["//  importação do contexto que usaremos\n\nimport { createContext, useState } from \"react\";\n\n// criacao do CounterContext, com export\n\nexport const CounterContext = createContext();\n\n//cricacao do CounterProvider com um children por props, ja padrao.\n// o children sera nosso componente englobado  pelo  CounterProvider no futuro\n\nexport const CounterProvider = ({ children }) => {\n  const [counter, setCounter] = useState(0);\n\n  const addNumber = () => {\n    setCounter(counter + 1);\n  };\n\n  const subNumber = () => {\n    setCounter(counter - 1);\n  };\n\n  //Vamos entender o nosso retorno. Primeiro passamos o nosso contexto (CounterContext) com um .\n  //Provider para indicar que é o provedor do contexto,\n  // e então recebemos o children, que serão os elementos que terão acesso a esse contexto.\n  return (\n    <CounterContext.Provider value={{ counter, addNumber, subNumber }}>\n      {children}\n    </CounterContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}